{"files":{"pxt.json":"{\n    \"name\": \"ws2812b\",\n    \"version\": \"0.1.1\",\n    \"description\": \"A driver for WS2812B programmable LEDs in MakeCode\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.ts\",\n        \"sendBuffer.asm\",\n        \"setBufferMode.asm\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"enabled\": 0\n                }\n            }\n        }\n    }\n}\n","setBufferMode.asm":"setBufferMode:\r\n    bx lr","main.ts":"namespace ws2812b {\n    //% shim=sendBufferAsm\n    export function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n\n    //% shim=setBufferMode\n    export function setBufferMode(pin: DigitalPin, mode: number) {\n\n    }\n}\n","test.ts":"/**\n#define LIGHTMODE_RGB 1\n#define LIGHTMODE_RGBW 2\n#define LIGHTMODE_RGB_RGB 3\n#define LIGHTMODE_DOTSTAR 4\n */\nws2812b.setBufferMode(DigitalPin.P0, 1)\nws2812b.sendBuffer(hex`ff0000 00ff00 0000ff`, DigitalPin.P0)\n","README.md":"# ws2812\n\nA driver for WS2812B programmable LEDs in MakeCode.\n\n## Usage\n\n### sendBuffer\n\nThe package exposes ``ws2812b.sendBuffer`` that bit-bangs a color buffer for WS2812B LEDs over a pin.\n\nSee https://github.com/microsoft/pxt-neopixel for an example of usage.\n\n### setBufferMode\n\nThis function allows to specify the color layout in the buffer.\n\n```\n#define LIGHTMODE_RGB 1\n#define LIGHTMODE_RGBW 2\n#define LIGHTMODE_RGB_RGB 3\n```\n\n## ~ hint\n \n**Bluetooth disabled**: This package disables BLE as the real time requirements of the WS2812 conflict with the BLE stack.\n\n## ~\n\n## Simulator support\n\nThe ``sendBuffer`` function is supported by the micro:bit simulator!\n\n## License\n\nMIT\n\n## Supported targets\n\n* for PXT/microbit\n* for PXT/calliope\n\n(The metadata above is needed for package search.)\n\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n","sendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n\n\n"}}